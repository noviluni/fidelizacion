{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validateForm","formInfo","state","registerForm","inputs","every","input","required","key","handleChange","event","target","id","value","setState","handleSubmit","userTypeName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","selectForm","userTypes","Symbol","iterator","next","done","userType","name","form","err","return","handleSubmitRegister","thanksPage","handleContinue","removeRegisterForm","_this2","fetch","then","response","json","json_res","_this3","react_default","a","createElement","className","concat","title","firstText","firstname","secondText","advantages","map","advantage","text","onClick","buttonText","onSubmit","label","type","inputType","placeholder","onChange","footer","disabled","subtitle","user_type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c73718e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectForm: {},\n      registerForm: null,\n      thanksPage: null,\n      formInfo: {},\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:8000')\n      .then((response) => {\n        return response.json();\n      })\n      .then((json_res) => {\n        this.setState({selectForm:json_res});\n      });\n  }\n\n  validateForm = () => {\n    let formInfo = this.state.formInfo;\n    let valid = this.state.registerForm.inputs.every(function(input){\n      return input.required ? formInfo[input.key] : true\n    })\n\n    return valid\n  }\n\n  handleChange = event => {\n    let formInfo = this.state.formInfo;\n    formInfo[event.target.id] = event.target.value\n    this.setState({\n      formInfo: formInfo\n    });\n  }\n\n  handleSubmit = event => {\n    let userTypeName = event.target.id;\n    for (let userType of this.state.selectForm.userTypes){\n      if (userType.name === userTypeName) {\n        this.setState({registerForm: userType.form})\n      }\n    }\n  }\n\n  handleSubmitRegister = () => {\n    this.setState({thanksPage: this.state.registerForm.thanksPage})\n  }\n\n  handleContinue = () => {\n    this.setState({registerForm: null, thanksPage: null, formInfo: {}})\n  }\n\n  removeRegisterForm = () => {\n    this.setState({registerForm: null, formInfo: {}})\n  }\n\n  render() {\n    const thanksPage = this.state.thanksPage;\n    const registerForm = this.state.registerForm;\n    const userTypes = this.state.selectForm.userTypes;\n    \n    if (thanksPage) {\n      // Thanks page\n      return (\n        <div className=\"thanks-page\">\n          <span className=\"thanks-page__title\">{`${thanksPage.title}`}</span>  \n          <div className=\"thanks-page__content\">\n            <div className=\"thanks-page__content__text\">{`${thanksPage.firstText}`}</div>\n            <div className=\"thanks-page__content__text\">{ !this.state.formInfo.firstname ? this.state.formInfo.name : ``}</div>\n            <span className=\"check mainCheck\">☑</span>\n            <div className=\"thanks-page__content__text\">{ this.state.formInfo.firstname ? \"¡Welcome \"+this.state.formInfo.firstname+\"!\" : ``}</div>\n            <p className=\"thanks-page__advantage-title\">{`${thanksPage.secondText}`}</p>\n\n            {thanksPage.advantages.map(advantage => (\n              <p key={`${advantage.id}`}><span className=\"check\">☑</span>{`${advantage.text}`}</p>\n            ))}\n            <button \n              className=\"thanks-page__button\"\n              onClick={this.handleContinue}>\n                {`${thanksPage.buttonText}`}\n            </button>\n          </div>\n          <span className=\"close-button\">✕</span>\n        </div>\n      )\n    } else if (registerForm) {\n      return (\n        // Guest register\n        <div className=\"register-form\">\n          <form onSubmit={this.handleSubmitRegister}>\n            <span className=\"register-form__title\">{`${registerForm.title}`} </span>  \n            <div className=\"register-form__options\">\n              {registerForm.inputs.map(input => (\n                <div key={`${input.key}`} className=\"register-form__option\">\n                  <label className=\"register-form__label\">\n                    {`${input.label}`} { input.required ? `*` : ``}\n                  </label> \n                  <input\n                    type={`${input.inputType}`}\n                    placeholder={`${input.placeholder}`}\n                    onChange={this.handleChange}\n                    required={input.required}\n                    id={input.key}\n                  />\n                </div>\n              ))}  \n            <span className=\"register-form__footer\">{`${registerForm.footer}`}</span>\n          </div>\n          <button \n                disabled={!this.validateForm()}\n                type=\"submit\"\n                className=\"register-form__button\">\n                {`${registerForm.buttonText}`}\n            </button>\n          </form>\n          <span className=\"back-button\" onClick={this.removeRegisterForm}>←</span>\n          <span className=\"close-button\">✕</span>\n        </div>\n    )} else if (userTypes) {\n    return (\n      // Select screen\n      <div id=\"signup-form\">\n        <form onSubmit={this.handleSubmit}>\n          <span className=\"signup-form__title\">{`${this.state.selectForm.title}`}</span>  \n          <span className=\"signup-form__subtitle\">{`${this.state.selectForm.subtitle}`}</span>  \n          <div className=\"signup-form__options\">\n            {userTypes.map(user_type => (\n              <label key={`${user_type.name}`} className=\"signup-form__label\">\n                <input\n                  type=\"radio\"\n                  id={`${user_type.name}`}\n                  onClick={this.handleSubmit}\n                  className=\"signup-form__option\"\n                />\n                {`${user_type.text}`}\n              </label>\n            ))}     \n            </div>\n        </form>\n        <span className=\"signup-form__footer\">{`${this.state.selectForm.footer}`}</span>\n        <div className=\"footer\"><span>Are you registered?</span></div>\n        <span className=\"close-button\">✕</span>\n      </div>\n    );\n  } else { return (<div>loading...</div>)}}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}